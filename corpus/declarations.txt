==================
Constant declaration
==================

const bit<16> TYPE_IPV4 = 0x800;

---

(source_file
    (constant_declaration
        (type_ref
            (base_type
                (integer)))
        (name
            (non_type_name
                (identifier)))
        (initializer
            (expression
              (integer)))))

==================
Extern declaration
==================

extern Checksum16 {
    Checksum16();
    void test();
}

extern void f(inout bit x, in bit y);

---

(source_file
    (extern_declaration
        (non_type_name
                (identifier))
        (method_prototype
            (type_identifier
                (identifier)))
        (method_prototype
            (function_prototype
                (type_or_void)
                    (name
                        (non_type_name
                            (identifier))))))
    (extern_declaration
        (function_prototype
            (type_or_void)
                (name
                    (non_type_name
                        (identifier)))
            (parameter_list
                (parameter_list
                    (parameter
                        (direction)
                        (type_ref
                            (base_type))
                        (name
                            (non_type_name
                                (identifier)))))
                (parameter
                    (direction)
                    (type_ref
                        (base_type))
                    (name
                        (non_type_name
                            (identifier))))))))

==================
Action declaration 
==================

action Forward_a(out bit<9> outputPort, bit<9> port) {
    outputPort = port;
}

---

(source_file
    (action_declaration
        (name
            (non_type_name
                (identifier)))
        (parameter_list
                (parameter_list
                    (parameter
                        (direction)
                        (type_ref
                            (base_type
                                (integer)))
                        (name
                            (non_type_name
                            (identifier)))))
                    (parameter
                        (type_ref
                            (base_type
                                (integer)))
                        (name
                            (non_type_name
                                (identifier)))))
        (block_statement
            (stat_or_decl_list
                (statement_or_declaration
                    (statement
                        (assignment_or_method_call_statement
                            (lvalue
                                (prefixed_non_type_name
                                    (non_type_name
                                        (identifier))))
                            (expression
                                (non_type_name
                                    (identifier))))))))))

==================
Parser declaration 
==================

parser MyParser(out headers packet) {
    state start {
        transition parse_ethernet;
    }
}

---

(source_file
    (parser_declaration
        (parser_type_declaration
            (name
                (non_type_name
                    (identifier)))
            (parameter_list
                (parameter
                    (direction)
                    (type_ref
                        (type_name
                            (prefixed_type
                                (type_identifier
                                    (identifier)))))
                    (name
                        (non_type_name
                            (identifier))))))
        (parser_state
            (name
                (non_type_name
                    (identifier)))
            (transition_statement
                (state_expression
                    (name
                        (non_type_name
                            (identifier))))))))

==================
Include declaration 
==================

#include <core.p4>

---

(source_file
    (include_declaration
        (file_name)))

==================
Type declaration (typedef)
==================

typedef bit<48> EthernetAddress;

---

(source_file
    (type_declaration
        (typedef_declaration
            (type_ref
                (base_type
                    (integer)))
            (name
                (non_type_name
                    (identifier))))))

==================
Control declaration
==================

control MyEgress(inout headers hdr) {
    apply {}
}

---

(source_file
    (control_declaration
        (control_type_declaration
            (name
                (non_type_name
                    (identifier)))
            (parameter_list
                (parameter
                    (direction)
                        (type_ref
                            (type_name
                                (prefixed_type
                                    (type_identifier
                                        (identifier)))))
                        (name
                            (non_type_name
                                (identifier))))))
        (control_body
            (block_statement))))

==================
Instantiation 1
==================

Counter(32w1024, CounterType.Both) ctr;

---

(source_file
    (instantiation
        (type_ref
            (type_name
                (prefixed_type
                    (type_identifier
                        (identifier)))))
        (argument_list
            (argument_list
                (argument
                    (expression
                        (integer))))
            (argument
                (expression
                    (type_name
                        (prefixed_type
                            (type_identifier
                                (identifier))))
                    (member
                    (name
                        (non_type_name
                            (identifier)))))))
        (name
          (non_type_name
            (identifier)))))

==================
Instantiation 2
==================

Balancer() b = {
    bit test() {
        return;
    }
}

---

(source_file
    (instantiation
        (type_ref
            (type_name
                (prefixed_type
                    (type_identifier
                        (identifier)))))
        (name
            (non_type_name
                (identifier)))
        (obj_initializer
            (obj_declaration
                (function_declaration
                    (function_prototype
                        (type_or_void
                            (type_ref
                                (base_type)))
                        (name
                            (non_type_name
                                (identifier))))
                    (block_statement
                        (stat_or_decl_list
                            (statement_or_declaration
                                (statement
                                    (return_statement))))))))))

==================
Error declaration
==================

error { ParseError, PacketTooShort }

---

(source_file
    (error_declaration
        (identifier_list
            (identifier_list
                (name
                    (non_type_name
                        (identifier))))
            (name
                (non_type_name
                    (identifier))))))

==================
Match kind declaration
==================

match_kind {
   exact,
   ternary,
   lpm
}

---

(source_file
    (match_kind_declaration
        (identifier_list
            (identifier_list
                (identifier_list
                    (name
                        (non_type_name
                            (identifier))))
                (name
                    (non_type_name
                        (identifier))))
            (name
                (non_type_name
                    (identifier))))))

==================
Function declaration
==================

bit<32> max(in bit<32> left, in bit<32> right) {
   if (left > right)
      return left;
   return right;
}

---

(source_file
    (function_declaration
        (function_prototype
            (type_or_void
                (type_ref
                    (base_type
                        (integer))))
            (name
                (non_type_name
                    (identifier)))
            (parameter_list
                (parameter_list
                    (parameter
                        (direction)
                    (type_ref
                        (base_type
                            (integer)))
                    (name
                        (non_type_name
                            (identifier)))))
                (parameter
                    (direction)
                    (type_ref
                        (base_type
                            (integer)))
                    (name
                        (non_type_name
                            (identifier))))))
        (block_statement
            (stat_or_decl_list
                (stat_or_decl_list
                    (statement_or_declaration
                        (statement
                            (conditional_statement
                                (expression
                                    (expression
                                        (non_type_name
                                            (identifier)))
                                    (expression
                                        (non_type_name
                                            (identifier))))
                                (statement
                                    (return_statement
                                        (expression
                                            (non_type_name
                                                (identifier)))))))))
                (statement_or_declaration
                    (statement
                        (return_statement
                            (expression
                                (non_type_name
                                    (identifier))))))))))
